/**
 * Quotation Table Builder - Inspired by Twenty CRM's dynamic table generation
 * 
 * This module follows Twenty's metadata-driven approach to generate quotation tables
 * that can be directly printed or exported. No separate print routes needed.
 */

/**
 * Quotation metadata schema - defines how quotation data should be structured and displayed
 * Following Twenty CRM's metadata pattern
 */
export const quotationTableMetadata = {
  object: 'quotation',
  displayName: 'Quotation',
  nameSingular: 'quotation',
  namePlural: 'quotations',
  
  // Table structure definition
  tableStructure: {
    sections: [
      {
        id: 'header',
        type: 'header',
        displayName: 'Quotation Header',
        fields: [
          { key: 'company_name', label: 'Company', type: 'text', size: 'large', style: 'bold' },
          { key: 'company_address', label: 'Address', type: 'text', size: 'medium' },
          { key: 'company_contact', label: 'Contact', type: 'text', size: 'medium' }
        ]
      },
      {
        id: 'quotation_details',
        type: 'info_grid',
        displayName: 'Quotation Information',
        layout: 'two_column',
        leftColumn: [
          { key: 'quotation_number', label: 'Quotation #', type: 'text', required: true },
          { key: 'quotation_date', label: 'Date', type: 'date', format: 'long' },
          { key: 'valid_until', label: 'Valid Until', type: 'date', format: 'long' }
        ],
        rightColumn: [
          { key: 'customer_name', label: 'Customer', type: 'text', required: true },
          { key: 'customer_company', label: 'Company', type: 'text' },
          { key: 'customer_address', label: 'Address', type: 'textarea' }
        ]
      },
      {
        id: 'items_table',
        type: 'data_table',
        displayName: 'Quotation Items',
        columns: [
          { key: 'serial', label: '#', type: 'number', width: '50px', align: 'center' },
          { key: 'description', label: 'Description', type: 'text', width: 'auto', align: 'left' },
          { key: 'quantity', label: 'Qty', type: 'number', width: '80px', align: 'right' },
          { key: 'unit_price', label: 'Unit Price', type: 'currency', width: '120px', align: 'right' },
          { key: 'total', label: 'Total', type: 'currency', width: '120px', align: 'right', weight: 'bold' }
        ],
        totalsRow: true,
        subtotalCalculation: {
          field: 'total',
          type: 'sum'
        }
      },
      {
        id: 'totals_summary',
        type: 'summary_table',
        displayName: 'Summary',
        alignment: 'right',
        width: '300px',
        rows: [
          { key: 'subtotal', label: 'Subtotal', type: 'currency', source: 'calculated' },
          { key: 'tax_amount', label: 'Tax', type: 'currency', source: 'calculated', condition: 'tax_rate > 0' },
          { key: 'total_amount', label: 'Total', type: 'currency', source: 'calculated', style: 'bold', highlight: true }
        ]
      },
      {
        id: 'terms',
        type: 'terms_section',
        displayName: 'Terms & Conditions',
        content: 'dynamic', // Can be loaded from template or database
        format: 'list'
      }
    ]
  },

  // Styling definitions - Twenty CRM style
  styling: {
    theme: 'professional',
    colors: {
      primary: '#2563eb',
      secondary: '#64748b',
      accent: '#f59e0b',
      background: '#ffffff',
      border: '#e2e8f0',
      text: {
        primary: '#1e293b',
        secondary: '#64748b',
        muted: '#94a3b8'
      }
    },
    typography: {
      fontFamily: "'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      sizes: {
        xs: '12px',
        sm: '14px',
        base: '16px',
        lg: '18px',
        xl: '20px',
        '2xl': '24px',
        '3xl': '30px'
      }
    },
    spacing: {
      xs: '4px',
      sm: '8px',
      md: '16px',
      lg: '24px',
      xl: '32px',
      '2xl': '48px'
    }
  },

  // Print-specific configurations
  print: {
    pageSize: 'A4',
    orientation: 'portrait',
    margins: {
      top: '20mm',
      right: '15mm',
      bottom: '20mm',
      left: '15mm'
    },
    header: {
      enabled: false
    },
    footer: {
      enabled: true,
      content: {
        left: 'Generated by ASP Cranes CRM',
        center: '',
        right: 'Page {page} of {pages}'
      },
      style: {
        fontSize: '10px',
        color: '#64748b'
      }
    },
    breakBefore: ['items_table'], // Page break before items table if needed
    keepTogether: ['totals_summary'] // Keep summary section together
  }
};

/**
 * QuotationTableBuilder - Main class for building quotation tables
 * Following Twenty CRM's factory pattern
 */
export class QuotationTableBuilder {
  constructor(metadata = quotationTableMetadata) {
    this.metadata = metadata;
    this.data = null;
    this.options = {
      theme: 'professional',
      printMode: false,
      responsive: true
    };
  }

  /**
   * Set quotation data for the table
   * @param {Object} quotationData - Raw quotation data from database
   */
  setData(quotationData) {
    this.data = this.normalizeData(quotationData);
    return this;
  }

  /**
   * Set builder options
   * @param {Object} options - Builder options
   */
  setOptions(options) {
    this.options = { ...this.options, ...options };
    return this;
  }

  /**
   * Generate complete HTML table structure
   * @returns {string} Complete HTML with embedded CSS
   */
  generateHTML() {
    if (!this.data) {
      throw new Error('No data provided. Call setData() first.');
    }

    const sections = this.metadata.tableStructure.sections;
    let html = this.generateDocumentStart();

    sections.forEach(section => {
      html += this.generateSection(section);
    });

    html += this.generateDocumentEnd();
    return html;
  }

  /**
   * Generate printable version
   * @returns {string} Print-optimized HTML
   */
  generatePrintHTML() {
    this.setOptions({ printMode: true });
    return this.generateHTML();
  }

  /**
   * Normalize raw quotation data to match metadata structure
   * @param {Object} rawData - Raw data from database
   * @returns {Object} Normalized data
   */
  normalizeData(rawData) {
    // Calculate derived fields
    const items = rawData.items || [];
    const subtotal = items.reduce((sum, item) => sum + (parseFloat(item.total) || 0), 0);
    const taxRate = parseFloat(rawData.tax_rate) || 0;
    const taxAmount = subtotal * (taxRate / 100);
    const totalAmount = subtotal + taxAmount;

    return {
      // Company information
      company_name: rawData.company?.name || 'ASP Cranes',
      company_address: rawData.company?.address || 'Industrial Area, New Delhi, India',
      company_contact: `Phone: ${rawData.company?.phone || '+91-XXXX-XXXX'} | Email: ${rawData.company?.email || 'info@aspcranes.com'}`,

      // Quotation details
      quotation_number: rawData.quotation_number || 'DRAFT',
      quotation_date: this.formatDate(rawData.created_at),
      valid_until: this.formatDate(rawData.valid_until),
      description: rawData.description || '',

      // Customer information
      customer_name: rawData.customer?.name || '',
      customer_company: rawData.customer?.company || '',
      customer_address: rawData.customer?.address || '',

      // Items with serial numbers
      items: items.map((item, index) => ({
        serial: index + 1,
        description: item.description || item.name || '',
        quantity: item.quantity || 1,
        unit_price: parseFloat(item.unit_price) || parseFloat(item.price) || 0,
        total: parseFloat(item.total) || ((item.quantity || 1) * (parseFloat(item.unit_price) || parseFloat(item.price) || 0))
      })),

      // Calculated totals
      subtotal,
      tax_rate: taxRate,
      tax_amount: taxAmount,
      total_amount: totalAmount,

      // Metadata
      generated_date: new Date().toLocaleDateString(),
      generated_time: new Date().toLocaleTimeString()
    };
  }

  /**
   * Generate document start with CSS
   * @returns {string} Document start HTML
   */
  generateDocumentStart() {
    const styling = this.metadata.styling;
    const printCSS = this.options.printMode ? this.generatePrintCSS() : '';
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quotation - ${this.data.quotation_number}</title>
    <style>
        ${this.generateBaseCSS()}
        ${printCSS}
    </style>
</head>
<body>
    <div class="quotation-container">`;
  }

  /**
   * Generate document end
   * @returns {string} Document end HTML
   */
  generateDocumentEnd() {
    return `
    </div>
</body>
</html>`;
  }

  /**
   * Generate section HTML based on section type
   * @param {Object} section - Section metadata
   * @returns {string} Section HTML
   */
  generateSection(section) {
    const generators = {
      header: () => this.generateHeaderSection(section),
      info_grid: () => this.generateInfoGridSection(section),
      data_table: () => this.generateDataTableSection(section),
      summary_table: () => this.generateSummaryTableSection(section),
      terms_section: () => this.generateTermsSection(section)
    };

    const generator = generators[section.type];
    if (!generator) {
      console.warn(`Unknown section type: ${section.type}`);
      return '';
    }

    return `
    <div class="section section-${section.id}" data-section-type="${section.type}">
        ${generator()}
    </div>`;
  }

  /**
   * Generate header section
   * @param {Object} section - Header section metadata
   * @returns {string} Header HTML
   */
  generateHeaderSection(section) {
    return `
    <div class="header-section">
        <h1 class="company-name">${this.data.company_name}</h1>
        <div class="company-details">
            <div class="company-address">${this.data.company_address}</div>
            <div class="company-contact">${this.data.company_contact}</div>
        </div>
        <div class="document-title">QUOTATION</div>
    </div>`;
  }

  /**
   * Generate info grid section
   * @param {Object} section - Info grid section metadata
   * @returns {string} Info grid HTML
   */
  generateInfoGridSection(section) {
    let html = `<div class="info-grid ${section.layout}">`;
    
    if (section.layout === 'two_column') {
      html += '<div class="info-column">';
      section.leftColumn.forEach(field => {
        html += this.generateInfoField(field);
      });
      html += '</div>';
      
      html += '<div class="info-column">';
      section.rightColumn.forEach(field => {
        html += this.generateInfoField(field);
      });
      html += '</div>';
    }
    
    html += '</div>';
    return html;
  }

  /**
   * Generate info field
   * @param {Object} field - Field metadata
   * @returns {string} Field HTML
   */
  generateInfoField(field) {
    const value = this.data[field.key] || '';
    const formattedValue = this.formatFieldValue(value, field.type, field.format);
    
    return `
    <div class="info-field">
        <label class="info-label">${field.label}:</label>
        <span class="info-value">${formattedValue}</span>
    </div>`;
  }

  /**
   * Generate data table section (items table)
   * @param {Object} section - Data table section metadata
   * @returns {string} Data table HTML
   */
  generateDataTableSection(section) {
    let html = `
    <div class="data-table-container">
        <table class="data-table">
            <thead>
                <tr>`;
    
    section.columns.forEach(column => {
      html += `<th class="column-${column.key}" style="width: ${column.width}; text-align: ${column.align}">${column.label}</th>`;
    });
    
    html += `
                </tr>
            </thead>
            <tbody>`;
    
    this.data.items.forEach(item => {
      html += '<tr>';
      section.columns.forEach(column => {
        const value = item[column.key];
        const formattedValue = this.formatFieldValue(value, column.type);
        const cellClass = column.weight ? `cell-${column.weight}` : '';
        html += `<td class="${cellClass}" style="text-align: ${column.align}">${formattedValue}</td>`;
      });
      html += '</tr>';
    });
    
    html += `
            </tbody>
        </table>
    </div>`;
    
    return html;
  }

  /**
   * Generate summary table section
   * @param {Object} section - Summary table section metadata
   * @returns {string} Summary table HTML
   */
  generateSummaryTableSection(section) {
    let html = `
    <div class="summary-section" style="text-align: ${section.alignment}">
        <table class="summary-table" style="width: ${section.width}">`;
    
    section.rows.forEach(row => {
      // Check condition if specified
      if (row.condition && !this.evaluateCondition(row.condition)) {
        return;
      }
      
      const value = this.data[row.key];
      const formattedValue = this.formatFieldValue(value, row.type);
      const rowClass = row.highlight ? 'highlight-row' : '';
      const cellClass = row.style === 'bold' ? 'bold-cell' : '';
      
      html += `
      <tr class="${rowClass}">
          <td class="summary-label">${row.label}:</td>
          <td class="summary-value ${cellClass}">${formattedValue}</td>
      </tr>`;
    });
    
    html += `
        </table>
    </div>`;
    
    return html;
  }

  /**
   * Generate terms section
   * @param {Object} section - Terms section metadata
   * @returns {string} Terms HTML
   */
  generateTermsSection(section) {
    const terms = [
      'Payment is due within 30 days of invoice date.',
      'All equipment remains the property of ASP Cranes until full payment is received.',
      'This quotation is valid for 30 days from the date of issue.',
      'All prices are in Indian Rupees (INR) and exclude applicable taxes unless stated otherwise.'
    ];
    
    let html = `
    <div class="terms-section">
        <h3 class="terms-title">${section.displayName}</h3>
        <ul class="terms-list">`;
    
    terms.forEach(term => {
      html += `<li class="terms-item">${term}</li>`;
    });
    
    html += `
        </ul>
    </div>`;
    
    return html;
  }

  /**
   * Format field value based on type
   * @param {any} value - Raw value
   * @param {string} type - Value type
   * @param {string} format - Format option
   * @returns {string} Formatted value
   */
  formatFieldValue(value, type, format) {
    if (value === null || value === undefined || value === '') {
      return '';
    }

    switch (type) {
      case 'currency':
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR'
        }).format(parseFloat(value) || 0);
      
      case 'number':
        return parseFloat(value) || 0;
      
      case 'date':
        if (format === 'long') {
          return this.formatDate(value);
        }
        return new Date(value).toLocaleDateString();
      
      case 'text':
      default:
        return String(value);
    }
  }

  /**
   * Format date for display
   * @param {string|Date} date - Date to format
   * @returns {string} Formatted date
   */
  formatDate(date) {
    if (!date) return '';
    
    try {
      return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return String(date);
    }
  }

  /**
   * Evaluate condition for conditional rendering
   * @param {string} condition - Condition string
   * @returns {boolean} Condition result
   */
  evaluateCondition(condition) {
    // Simple condition evaluation (can be enhanced)
    if (condition.includes('tax_rate > 0')) {
      return this.data.tax_rate > 0;
    }
    return true;
  }

  /**
   * Generate base CSS styles
   * @returns {string} CSS styles
   */
  generateBaseCSS() {
    const colors = this.metadata.styling.colors;
    const typography = this.metadata.styling.typography;
    const spacing = this.metadata.styling.spacing;

    return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: ${typography.fontFamily};
            font-size: ${typography.sizes.base};
            line-height: 1.6;
            color: ${colors.text.primary};
            background: ${colors.background};
        }

        .quotation-container {
            max-width: 800px;
            margin: 0 auto;
            padding: ${spacing['2xl']};
            background: ${colors.background};
        }

        .section {
            margin-bottom: ${spacing.xl};
        }

        .header-section {
            text-align: center;
            margin-bottom: ${spacing['2xl']};
            padding-bottom: ${spacing.lg};
            border-bottom: 3px solid ${colors.primary};
        }

        .company-name {
            font-size: ${typography.sizes['3xl']};
            font-weight: bold;
            color: ${colors.primary};
            margin-bottom: ${spacing.sm};
        }

        .company-details {
            font-size: ${typography.sizes.sm};
            color: ${colors.text.secondary};
            margin-bottom: ${spacing.lg};
        }

        .document-title {
            font-size: ${typography.sizes.xl};
            font-weight: 600;
            color: ${colors.text.primary};
            letter-spacing: 2px;
        }

        .info-grid.two_column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: ${spacing.xl};
            margin-bottom: ${spacing.xl};
        }

        .info-column {
            background: #f8fafc;
            padding: ${spacing.lg};
            border-radius: 8px;
            border-left: 4px solid ${colors.primary};
        }

        .info-field {
            margin-bottom: ${spacing.md};
            display: flex;
            align-items: flex-start;
        }

        .info-label {
            font-weight: 600;
            color: ${colors.text.secondary};
            min-width: 120px;
            margin-right: ${spacing.sm};
        }

        .info-value {
            color: ${colors.text.primary};
            flex: 1;
        }

        .data-table-container {
            margin: ${spacing.xl} 0;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        .data-table th {
            background: ${colors.primary};
            color: white;
            padding: ${spacing.md};
            text-align: left;
            font-weight: 600;
            font-size: ${typography.sizes.sm};
        }

        .data-table td {
            padding: ${spacing.md};
            border-bottom: 1px solid ${colors.border};
            font-size: ${typography.sizes.sm};
        }

        .data-table tr:nth-child(even) {
            background: #f8fafc;
        }

        .data-table tr:hover {
            background: #f1f5f9;
        }

        .cell-bold {
            font-weight: 600;
        }

        .summary-section {
            margin-top: ${spacing.xl};
            display: flex;
            justify-content: flex-end;
        }

        .summary-table {
            border-collapse: collapse;
        }

        .summary-table td {
            padding: ${spacing.sm} ${spacing.md};
            border-bottom: 1px solid ${colors.border};
        }

        .summary-label {
            font-weight: 500;
            text-align: right;
            color: ${colors.text.secondary};
        }

        .summary-value {
            text-align: right;
            font-weight: 600;
            color: ${colors.text.primary};
        }

        .highlight-row {
            background: ${colors.primary};
            color: white;
        }

        .highlight-row .summary-label,
        .highlight-row .summary-value {
            color: white;
        }

        .bold-cell {
            font-weight: bold;
            font-size: ${typography.sizes.lg};
        }

        .terms-section {
            margin-top: ${spacing['2xl']};
            padding: ${spacing.lg};
            background: #f8fafc;
            border-radius: 8px;
            border: 1px solid ${colors.border};
        }

        .terms-title {
            font-size: ${typography.sizes.lg};
            font-weight: 600;
            color: ${colors.text.primary};
            margin-bottom: ${spacing.md};
        }

        .terms-list {
            list-style: none;
            padding: 0;
        }

        .terms-item {
            margin-bottom: ${spacing.sm};
            font-size: ${typography.sizes.sm};
            color: ${colors.text.secondary};
            position: relative;
            padding-left: ${spacing.lg};
        }

        .terms-item:before {
            content: "•";
            color: ${colors.primary};
            font-weight: bold;
            position: absolute;
            left: 0;
        }
    `;
  }

  /**
   * Generate print-specific CSS
   * @returns {string} Print CSS
   */
  generatePrintCSS() {
    return `
        @media print {
            body {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }

            .quotation-container {
                max-width: none;
                margin: 0;
                padding: 20px;
            }

            .section {
                page-break-inside: avoid;
            }

            .data-table-container {
                page-break-inside: avoid;
            }

            .summary-section {
                page-break-inside: avoid;
            }
        }
    `;
  }
}

// Export singleton instance
export const quotationTableBuilder = new QuotationTableBuilder();
