/**
 * PostgreSQL Deal Repository
 * Handles database operations for deals using PostgreSQL via API
 */
import { Deal, DealStage } from '../../types/deal';
import { logDealsFromAPI, stageToDatabaseStatus } from '../../utils/dealMappings';

// Define API base URL
const API_BASE_URL = import.meta.env.VITE_API_URL || '/api';

/**
 * Get all deals from the database via API
 */
export const getDeals = async (): Promise<Deal[]> => {
  try {
    console.log('Getting all deals via API');
    
    // Get JWT token from localStorage
    const token = localStorage.getItem('jwt-token');
    if (!token) {
      console.error('No JWT token available for API call');
      throw new Error('Authentication required');
    }
    
    // Make API call to get deals
    const response = await fetch(`${API_BASE_URL}/deals`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = 'Failed to fetch deals';
      try {
        const errorData = JSON.parse(errorText);
        errorMessage = errorData.error || errorMessage;
      } catch (e) {
        console.error('Error parsing error response:', e);
      }
      throw new Error(errorMessage);
    }
    
    const deals = await response.json();
    
    // Log the structure of the first deal to help debug
    if (deals.length > 0) {
      console.log('Sample deal:', deals[0]);
    }
    
    // Validate and enhance the deals with default values where needed
    const validatedDeals = deals.map((deal: any): Deal => ({
      id: deal.id || `unknown-${Math.random()}`,
      leadId: deal.leadId || '',
      customerId: deal.customerId || '',
      title: deal.title || `Deal ${deal.id || 'Unknown'}`,
      description: deal.description || '',
      value: typeof deal.value === 'number' ? deal.value : 0,
      stage: (deal.stage as DealStage) || 'qualification',
      createdAt: deal.createdAt || new Date().toISOString(),
      updatedAt: deal.updatedAt || new Date().toISOString(),
      createdBy: deal.createdBy || '',
      assignedTo: deal.assignedTo || '',
      assignedToName: deal.assignedToName || '',
      probability: typeof deal.probability === 'number' ? deal.probability : 0,
      expectedCloseDate: deal.expectedCloseDate || new Date().toISOString(),
      notes: deal.notes || '',
      customer: {
        name: deal.customer?.name || 'Unknown Customer',
        email: deal.customer?.email || '',
        phone: deal.customer?.phone || '',
        company: deal.customer?.company || '',
        address: deal.customer?.address || '',
        designation: deal.customer?.designation || ''
      }
    }));
    
    logDealsFromAPI(validatedDeals);
    return validatedDeals;
  } catch (error) {
    console.error('Error fetching deals:', error);
    throw error;
  }
};

/**
 * Create a new deal in the database via API
 */
export const createDeal = async (dealData: Omit<Deal, 'id' | 'createdAt' | 'updatedAt'>): Promise<Deal> => {
  try {
    console.log('Creating deal via API:', dealData);
    
    // Get JWT token from localStorage
    const token = localStorage.getItem('jwt-token');
    if (!token) {
      console.error('No JWT token available for API call');
      throw new Error('Authentication required');
    }
    
    // Make API call to create deal
    const response = await fetch(`${API_BASE_URL}/deals`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dealData)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to create deal');
    }
    
    const createdDeal = await response.json();
    return createdDeal;
  } catch (error) {
    console.error('Error creating deal:', error);
    throw error;
  }
};

/**
 * Update a deal's stage in the database via API
 * Note: In the database, the "stage" field is actually called "status"
 */
export const updateDealStage = async (id: string, stage: DealStage): Promise<Deal | null> => {
  try {
    console.log(`Updating deal ${id} stage to ${stage} via API (mapped to status field in DB)`);
    
    // Get JWT token from localStorage
    const token = localStorage.getItem('jwt-token');
    if (!token) {
      console.error('No JWT token available for API call');
      throw new Error('Authentication required');
    }
    
    // Make API call to update deal stage
    const response = await fetch(`${API_BASE_URL}/deals/${id}/stage`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ stage: stageToDatabaseStatus(stage) })
    });
    
    if (response.status === 404) {
      return null;
    }
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to update deal stage');
    }
    
    const updatedDeal = await response.json();
    return updatedDeal;
  } catch (error) {
    console.error('Error updating deal stage:', error);
    throw error;
  }
};

/**
 * Get a deal by ID from the database via API
 */
export const getDealById = async (id: string): Promise<Deal | null> => {
  try {
    console.log(`Getting deal ${id} via API`);
    
    // Get JWT token from localStorage
    const token = localStorage.getItem('jwt-token');
    if (!token) {
      console.error('No JWT token available for API call');
      throw new Error('Authentication required');
    }
    
    // Make API call to get deal by ID
    const response = await fetch(`${API_BASE_URL}/deals/${id}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 404) {
      return null;
    }
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to fetch deal');
    }
    
    const deal = await response.json();
    return deal;
  } catch (error) {
    console.error('Error fetching deal by ID:', error);
    throw error;
  }
};
