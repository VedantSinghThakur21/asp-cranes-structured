name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (backend)
        run: |
          cd crm-app/backend
          npm install

      - name: Install dependencies (frontend)
        run: |
          cd crm-app/frontend
          npm install

      - name: Run backend tests
        run: |
          cd crm-app/backend
          npm test

      - name: Run frontend tests
        run: |
          cd crm-app/frontend
          npm test

      - name: Build backend
        run: |
          cd crm-app/backend
          npm run build

      - name: Build frontend
        run: |
          cd crm-app/frontend
          npm run build

      - name: Docker Compose Build & Up
        run: |
          docker-compose -f docker-compose.yml up --build -d

      - name: Health Check Backend
        run: |
          curl --retry 10 --retry-delay 5 http://localhost:3001/api/health || exit 1

      - name: Health Check Frontend
        run: |
          curl --retry 10 --retry-delay 5 http://localhost:3000 || exit 1

      - name: Shutdown Docker Compose
        run: |
          docker-compose -f docker-compose.yml down

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to Production
        run: echo "Add your deployment steps here (e.g., SSH, cloud CLI, etc.)"
